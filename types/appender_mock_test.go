// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/prometheus/alertmanager/types (interfaces: StateAppender)
//
// Generated by this command:
//
//	mockgen -package types -destination appender_mock_test.go . StateAppender
//

// Package types is a generated GoMock package.
package types

import (
	reflect "reflect"

	model "github.com/prometheus/common/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStateAppender is a mock of StateAppender interface.
type MockStateAppender struct {
	ctrl     *gomock.Controller
	recorder *MockStateAppenderMockRecorder
	isgomock struct{}
}

// MockStateAppenderMockRecorder is the mock recorder for MockStateAppender.
type MockStateAppenderMockRecorder struct {
	mock *MockStateAppender
}

// NewMockStateAppender creates a new mock instance.
func NewMockStateAppender(ctrl *gomock.Controller) *MockStateAppender {
	mock := &MockStateAppender{ctrl: ctrl}
	mock.recorder = &MockStateAppenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateAppender) EXPECT() *MockStateAppenderMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockStateAppender) Append(fingerprint model.Fingerprint, state AlertState) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Append", fingerprint, state)
}

// Append indicates an expected call of Append.
func (mr *MockStateAppenderMockRecorder) Append(fingerprint, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockStateAppender)(nil).Append), fingerprint, state)
}

// AppendInhibited mocks base method.
func (m *MockStateAppender) AppendInhibited(fingerprint model.Fingerprint, inhibitedBy []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendInhibited", fingerprint, inhibitedBy)
}

// AppendInhibited indicates an expected call of AppendInhibited.
func (mr *MockStateAppenderMockRecorder) AppendInhibited(fingerprint, inhibitedBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendInhibited", reflect.TypeOf((*MockStateAppender)(nil).AppendInhibited), fingerprint, inhibitedBy)
}

// Close mocks base method.
func (m *MockStateAppender) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStateAppenderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStateAppender)(nil).Close))
}

// Flush mocks base method.
func (m *MockStateAppender) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockStateAppenderMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockStateAppender)(nil).Flush))
}
